/**

@mainpage BSM-Shell: An MKx example application
@author Cohda Wireless, http://www.cohdawireless.com

@section bsm_shell_doc_top_intro BSM-Shell introduction

The BSM-Shell application is an example application that demonstrates the
usage of the MKx's APIs: CAN, GPS, P1609, J2735, TCP/IP etc.

It's purpose is to enable customers to become familiar with the MKx APIs and
potentially use it as a base to create simple V2x applications.

This document presents the design details of the BSM-Shell application.
It is generated from the source code itself. See @ref bsm_shell_doxygen for navigation tips

Project details (and links to the other documentation) can be found on the Cohda Support Site:
https://support.cohdawireless.com/

@section bsm_shell_doc_top_func BSM-Shell functionality

The BSM-Shell application provides the following functionality:
 - Example MKx API interactions
 - Periodic (50ms) BSM transmission based on GPS, CAN and VIC information
 - File and/or UDP logging of all transmitted and received BSMs

@section bsm_shell_doc_top_arch BSM-Shell architecture

@image html  bsm-shell-arch.png "Top level architecture"
@image latex bsm-shell-arch.png "Top level architecture" width=16cm

Please see @ref bsm_shell for code details or @ref bsm_shell_usage for usage & debugging examples


@{ */
/** @} */



/* Top-level documentation structure: */



/**
 * @defgroup bsm_shell BSM-Shell Application
 * @{

@section bsm_shell_doc Overview

The @c bsm-shell application is further divided into three subsystems:
 - Non-interfacing functionality (@ref bsm_shell_control)
  - This subsystem includes:
   - Top level application processing like sub-module init/deinit
   - Command line options handling
   - BSM encode/decode functionality based on code generated by the @c asn1c ASN.1 compiler http://lionet.info/asn1c/compiler.html
 - Interface handling (@ref bsm_shell_if)
  - Each interface is contained within it's own module which exposes a consistent internal API
 - Miscelaneous library functions (@ref bsm_shell_library)
  - UDP logging is not striclty an MKx API, but a simple library is provided for demonstation purposes

@image html  bsm-shell-sys.png "Subsystems"
@image latex bsm-shell-sys.png "Subsystems" width=16cm

 */

    /**
     * @defgroup bsm_shell_control BSM-Shell Control
     * @{

@section bsm_shell_control_doc Overview

This subsystem includes all non-interface related application functionality:
 - Top level application processing like sub-module init/deinit (@ref bsm_shell_main)
 - Command line options handling (@ref bsm_shell_opt)
 - BSM encode/decode functionlality (@ref bsm_shell_msg)

     */

        /**
         * @defgroup bsm_shell_main BSM-Shell Main Application
         * @{
         */
        /**
         * @}
         */

        /**
         * @defgroup bsm_shell_opt BSM-Shell Options handling
         * @{
         */
        /**
         * @}
         */

        /**
         * @defgroup bsm_shell_msg BSM-Shell BSM Message handling
         * @{
         */
        /**
         * @}
         */

        /**
         * @defgroup bsm_shell_sec BSM Shell security related functionality
         * @{
         */
        /**
         * @}
         */

    /**
     * @}
     */

    /**
     * @defgroup bsm_shell_if BSM-Shell Interfaces
     * @{

@section bsm_shell_if_doc Overview

This subsystem includes all the interface handling modules.

Each module exposes a consistent internal API to the top level application code
- [ModuleName]Init() : Initialise the interface. It returns a file descriptor for the main management routine to monitor in a select() call.
- [ModuleName]Update() : When data becomes available on the file descriptor, the 'update' routine is called to fetch data from the interface.
- [ModuleName]Deinit() : A de-initialisation routine is provided for the management routine to call at application exit.
- Each module may also provide additional API functions that make sense for that particular interface.

     */

        /**
         * @defgroup bsm_shell_if_can BSM-Shell CAN interface
         * @{
         */
        /**
         * @}
         */

        /**
         * @defgroup bsm_shell_if_gps BSM-Shell GPS interface
         * @{
         */
        /**
         * @}
         */

        /**
         * @defgroup bsm_shell_if_p1609 BSM-Shell P1609 interface
         * @{
         */
        /**
         * @}
         */

        /**
         * @defgroup bsm_shell_if_p1609sync BSM-Shell P1609Sync interface
         * @{
         */
        /**
         * @}
         */

        /**
         * @defgroup bsm_shell_if_udp BSM-Shell UDP interface
         * @{
         */
        /**
         * @}
         */

    /**
     * @}
     */

    /**
     * @defgroup bsm_shell_library BSM-Shell Libraries
     * @{

@section bsm_shell_library_doc Overview

This subsystem includes miscellaneous re-usable libraries that are not BSM-Shell specific.

Currently this sub-section only contains the @ref bsm_shell_log

     */

        /**
         * @defgroup bsm_shell_log BSM-Shell Logging library
         * @{
         */
        /**
         * @}
         */

    /**
     * @}
     */

/**
 * @}
 */


/**
 * @defgroup bsm_shell_usage BSM-Shell Usage
 * @{

@section bsm_shell_usage_doc_usage Hands-on usage
The following description use 'mk5' only for illustration. It is valid for any MKx, unless specifically stated

@subsection bsm_shell_usage_doc_build_env Preparing the build env

- Build the MKx image
@verbatim
cd ~/mk5
make mk5
@endverbatim

- Build the asn1c tool http://lionet.info/asn1c/compiler.html
@verbatim
cd ~/mk5/tools/asn1c
make
@endverbatim

@subsection bsm_shell_usage_doc_dev_env Preparing the development env

- Open eclipse by clicking on the desktop icon
@image html  eclipse-00.png ""
@image latex eclipse-00.png "" width=16cm

- Right click on the BSM-Shell project and select 'Open Project'
@image html  eclipse-01.png ""
@image latex eclipse-01.png "" width=16cm

- Right click on the BSM-Shell project and select 'Build Project'
@image html  eclipse-02.png ""
@image latex eclipse-02.png "" width=16cm


@subsection bsm_shell_usage_doc_cmd_run Command line bsm-shell
- The bsm-shell application can be built directly from the command line
@verbatim
cd /home/user/mk5/stack/apps/bsm-shell/
make clean
make mk5
@endverbatim
- Uploading the application is a simple SCP transfer
@verbatim
cd /home/user/mk5/stack/apps/bsm-shell/
scp bsm-shell user@<MKx_A_IP>:/home/user/
scp bsm-shell user@<MKx_B_IP>:/home/user/
@endverbatim


- Start the application on each MKx (for more info see @ref bsm_shell_opt and @ref bsm_shell_if_p1609
 - SSH into the first MKx (ssh user@<MKx_A_IP>)
@verbatim
cd /mnt/rw/dbg
sudo cp /home/user/bsm-shell .
@endverbatim
 - Run bsm-shell
@verbatim
D_LEVEL=4 ./bsm-shell -c 178 -a 176 -b 174 -n 174 -x 0x00 -i 2400
@endverbatim
 - SSH into the second MKx (ssh user@<MKx_B_IP>)
@verbatim
cd /mnt/rw/dbg
sudo cp /home/user/bsm-shell .
@endverbatim
 - Run bsm-shell
@verbatim
D_LEVEL=4 ./bsm-shell -c 178 -a 176 -b 174 -n 174 -x 0x00 -i 2400
@endverbatim

 - The application can be stopped with a Ctrl-C
 - The logs are stored in bsmlog.txt

@subsection bsm_shell_usage_doc_cmd_dbg Command line debugging of bsm-shell
- Start the GDB server on the MKx
@verbatim
cd /mnt/rw/dbg
/usr/bin/gdbserver :10000 ./bsm-shell
@endverbatim
- Start GDB-Multiarch on the VM
@verbatim
gdb-multiarch ./bsm-shell
@endverbatim

- Connect GDB to the target
@verbatim
target remote <MKx_A_IP>:10000
break main
@endverbatim
- Start the app's execution. It will stop at the main() breakpoint
@verbatim
cont
@endverbatim
- Step the execution several times to convince yourself that it is indeed remotely debugging
@verbatim
n
n
@endverbatim
- Exit GDB
@verbatim
quit
@endverbatim


@subsection bsm_shell_usage_doc_eclipse_dbg Eclipse debugging of bsm-shell
- Open eclipse by clicking on the desktop icon
@image html  eclipse-00.png ""
@image latex eclipse-00.png "" width=16cm

- Edit the Makefile in BSM-Shell so that @c MKx_IP_ADDR is set to the MKx's IP address

- From the menu select: Run->Debug configurations

 - Select @c Debug @c 'bsm-shell'
@image html  eclipse-03.png ""
@image latex eclipse-03.png "" width=16cm
 - Select the 'debugger' tab and then the 'connection' sub-tab
 - Change the Hostname/IP address field to the same as @c MKx_IP_ADDR
 - Click 'Apply' and then 'Close'
@image html  eclipse-04.png ""
@image latex eclipse-04.png "" width=16cm

- From the menu select: @c Run->External_tools->Download @c 'bsm-shell'
 - Optionally assure yourself that the gdbserver is running by telnet-ing into the MKx and running @verbatim ps -ef @endverbatim
@image html  eclipse-05.png ""
@image latex eclipse-05.png "" width=16cm

- From the menu select: Run->Debug
 - Select @c Debug @c 'bsm-shell'
 - Click 'Run'
@image html  eclipse-06.png ""
@image latex eclipse-06.png "" width=16cm
 - The debug view will launch and the debugger will stop at main()
@image html  eclipse-07.png ""
@image latex eclipse-07.png "" width=16cm
 - Press F6 to step
 - Press F8 to run
 - The application's stdout is redirected to @c /home/user/bsm-out

- To stop debugging:
 - Click on the stop icon (red square) in the debug window
@image html  eclipse-08.png ""
@image latex eclipse-08.png "" width=16cm
  - Optionally assure yourself that the gdbserver has stopped by telnet-ing into the MKx and running @verbatim ps -ef @endverbatim
  - If gdbserver and bsm-shell are still running then kill them: @verbatim  killall -9 dbg/shell/bsm-shell  @endverbatim
  - Optionally check the bsm-shell output by running @verbatim cat /home/user/bsm-out @endverbatim
 - Switch the perspective from 'Debug' back to 'C/C++' @c Window->Open_Perspective->C/C++
@image html  eclipse-09.png ""
@image latex eclipse-09.png "" width=16cm

@subsection bsm_shell_usage_doc_cmd_ipv4 IPv4 operation
- The IEEE1609.3 specification does not require/support IPv4. Nevertheless, the MKx can support IPv4 via manual configuration:
- Start the application on each MKx
 - Telnet into the first MKx
@verbatim
cd /mnt/rw/dbg
D_LEVEL=4 ./bsm-shell -m 2 -4
@endverbatim
 - Telnet into the second MKx
@verbatim
cd /mnt/rw/dbg
D_LEVEL=4 ./bsm-shell -m 2 -4
@endverbatim
 - The applications can be stopped with a Ctrl-C
- Setup IPv4 addressing the @c wave-data interface
 - Telnet into the first MKx
@verbatim
ifconfig wave-data 192.168.234.1 up
@endverbatim
 - Telnet into the second MKx
@verbatim
ifconfig wave-data 192.168.234.2 up
@endverbatim
 - If the GPS has obtained a valid fix, then the one should be able to ping between each MKx

@subsection bsm_shell_usage_doc_cmd_eebl Simple EEBL demonstration
This is a simple BSM application which demonstrates transmission of EEBL (Emergency Electronic Brake Lights).
The BSM shell trasmits the status of one of the VIC GPIO pins (namely GPIO0).
When GPIO0 goes low (0V), then it is a hard-braking event which is transmitted by the MKx.
When another MKx receives this event, it will play a sound on the audio device connected to it.
When GPIO0 goes high again, then it implies that brakes are released and this event is also transmitted.
The receiver MKx will then play a soft sound.

- Connect a speaker to audio output of both MKx units
- Connect a 9-pin D-type connector to the VIC connector of the MKx units
- Connect two wires to two pins of the connectors, pin-1 (GPIO0) and pin-3 (GND)
- Power up both the MKx units
- Telnet into the two  MKx units
@verbatim
cd /mnt/rw/dbg
@endverbatim
- In the SDK
@verbatim
cd ~/mk5/stack/apps/bsm-shell/
@endverbatim
- There are two audio files in this directory
@verbatim
shotgun.wav
laser.wav
@endverbatim
- SCP these files and bsm-shell to the MKx units in /mnt/rw/dbg
- Start the VIC and then run bsm-shell from the MKx units
@verbatim
rc.vic start
D_LEVEL=4 ./bsm-shell
@endverbatim
- On one MKx unit, connect GPIO0 to GND
- A 'shotgun' sound will be heard on the other MKx unit
- Disconnect GPIO0 from GND
- A 'swoosh' sound  will be heard on the other MKx unit

 * @}
 */

 /**
 * @defgroup bsm_shell_doxygen Doxygen HOWTO
 * @{

@section bsm_shell_doxygen_doc_nav doxygen navigation

The documentation is organized into a heirarchy of modules.
Expand the modules to get an idea of the documentation heirarchy

@image html  doxy-modules.png "Documentation heirarchy"
@image latex doxy-modules.png "Documentation heirarchy" width=16cm

This hierarchical arrangement allows one to:
 - Obtain a broad overview by only reading the top-level sub-section headings (purple book icons)
 - Obtain a deep understanding of the a particular module's implementation (white page icons) by descending the tree

@subsection bsm_shell_doxygen_doc_nav_heading Sub-section headings
Subsections (purple book icons) may include introductory material

@image html  doxy-headings.png "Documentation headings"
@image latex doxy-headings.png "Documentation headings" width=16cm

@subsection bsm_shell_doxygen_doc_nav_page Module documentation

Module documentation (white page icons) consists of two parts:
 - Module introduction and API documentation
  - 1 - Introductory description of the module
  - 2 - Link to the module's implementation documentation
  - 3 - API documentation
@image html  doxy-page-api.png "Module documentation: APIs"
@image latex doxy-page-api.png "Module documentation: APIs" width=16cm

 - Module implementation details (accessed by clicking on the [ModuleName].c file link)
  - 1 - Link to the source code
  - 2 - Introductory description of the module's functionality
  - 3 - Link to function documentation
@image html  doxy-page-func.png "Module documentation: Functionality"
@image latex doxy-page-func.png "Module documentation: Functionqality" width=16cm


 * @}
 */
